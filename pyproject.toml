[tool.poetry]
name = "memory_langgraph"
version = "0.0.1"
description = "A simple memory-enabled agent for agents using LangChain and LangGraph, running locally"
authors = ["..."]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10.0,<3.13"
langgraph = "^0.2.56"
langchain = "^0.3.9"
langchain-core = "^0.3.22"
langchain-community = "^0.3.10"
langchain-anthropic = "^0.3.0"
langchain-openai = "^0.2.1"
langchain-qdrant = "^0.2.0"
langgraph-sdk = "^0.1.32"
jsonpatch = "^1.33"
dydantic = "^0.0.6"
pytest-asyncio = "^0.23.7"
pydantic-settings = "^2.3.4"
tavily-python = "^0.5.0"
tiktoken = "^0.8.0"
chromadb = "^0.5.23"
python-dotenv = "^1.0.1"
streamlit = "^1.39.0"
qdrant-client = "^1.12.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.10"
mypy = "^1.10.0"
pytest = "^8.2.2"

[tool.ruff]
lint.select = [
    "E",    # pycodestyle
    "F",    # pyflakes
    "I",    # isort
]
line-length = 120  # Set maximum line length to 120

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 120

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "E501"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"